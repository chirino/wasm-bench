<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>wasm-bench</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <uberjar.name>benchmarks</uberjar.name>
        <exec.mainClass>garden.bots.starter.Main</exec.mainClass>
        <graalvm.polyglot.version>24.1.1</graalvm.polyglot.version>
        <chicory.version>1.4.0</chicory.version>
        <jmh.version>1.37</jmh.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>com.dylibso.chicory</groupId>
          <artifactId>bom</artifactId>
          <version>${chicory.version}</version>
          <type>pom</type>
          <scope>import</scope>
        </dependency>
      </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- GraalWasm -->
        <dependency>
            <groupId>org.graalvm.polyglot</groupId>
            <artifactId>polyglot</artifactId> 
            <version>${graalvm.polyglot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.graalvm.polyglot</groupId>
            <artifactId>wasm</artifactId> 
            <version>${graalvm.polyglot.version}</version>
            <type>pom</type>
        </dependency>

        <!-- Chicory -->
        <dependency>
            <groupId>com.dylibso.chicory</groupId>
            <artifactId>compiler</artifactId>
        </dependency>
        <dependency>
            <groupId>com.dylibso.chicory</groupId>
            <artifactId>runtime</artifactId>
        </dependency>
        <dependency>
            <groupId>com.dylibso.chicory</groupId>
            <artifactId>wasi</artifactId>
        </dependency>
        <dependency>
            <groupId>com.dylibso.chicory</groupId>
            <artifactId>log</artifactId>
        </dependency>
        <dependency>
            <groupId>com.dylibso.chicory</groupId>
            <artifactId>wasm</artifactId>
        </dependency>
        
        <!-- JMH -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${jmh.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>${jmh.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
          <annotationProcessorPaths>
            <path>
              <groupId>org.openjdk.jmh</groupId>
              <artifactId>jmh-generator-annprocess</artifactId>
              <version>${jmh.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
            <execution>
                <goals>
                    <goal>exec</goal>
                </goals>
            </execution>
        </executions>
        <configuration>
            <executable>${java.home}/bin/java</executable>
            <arguments>
                <argument>-Dpolyglot.engine.WarnInterpreterOnly=false</argument>
                <argument>-classpath</argument>
                <classpath/>
                <argument>org.openjdk.jmh.Main</argument>
                    <!-- optionally provide a regexp of tests to run
                    e.g. -Djmh.tests="GraalWasmPhotonTest"
                    -->
                <argument>${jmh.tests}</argument>
            </arguments>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.dylibso.chicory</groupId>
        <artifactId>chicory-compiler-maven-plugin</artifactId>
        <version>${chicory.version}</version>
        <executions>
          <execution>
            <id>hello-plugin</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <name>org.graalvm.benchmark.helloworld.HelloModule</name>
              <wasmFile>${project.basedir}/src/main/resources/org/graalvm/benchmark/helloworld/hello.wasm</wasmFile>
            </configuration>
          </execution>
          <execution>
            <id>photon-plugin</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <name>org.graalvm.benchmark.photon.PhotonModule</name>
              <wasmFile>${project.basedir}/src/main/resources/org/graalvm/benchmark/photon/bench.wasm</wasmFile>
            </configuration>
          </execution>
        </executions> 
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.6.0</version>
        <executions>
          <execution>
            <id>addSource</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.basedir}/target/generated-sources/chicory-aot</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.6.0</version>
          <executions>
              <!--
              Copies compiler dependencies to the target/compiler folder. In order to run with an
              optimizing runtime on other JDKs than GraalVM we need to put the compiler on the upgrade module path.
              -->
              <execution>
                  <id>copy-dependencies</id>
                  <phase>process-resources</phase>
                  <goals>
                      <goal>copy</goal>
                  </goals>
                  <configuration>
                      <outputDirectory>
                          ${project.build.directory}/compiler
                      </outputDirectory>
                      <overWriteReleases>true</overWriteReleases>
                      <overWriteSnapshots>true</overWriteSnapshots>
                      <artifactItems>
                          <!--
                          Unfortunately Maven does not support resolving transitive dependencies
                          here automatically. So the list of dependencies might need to be updated when upgrading
                          to new versions of GraalVM.
                          -->
                          <artifactItem>
                              <groupId>org.graalvm.sdk</groupId>
                              <artifactId>collections</artifactId>
                              <version>${graalvm.polyglot.version}</version>
                              <type>jar</type>
                              <destFileName>collections.jar</destFileName>
                          </artifactItem>
                          <artifactItem>
                              <groupId>org.graalvm.sdk</groupId>
                              <artifactId>word</artifactId>
                              <version>${graalvm.polyglot.version}</version>
                              <type>jar</type>
                              <destFileName>word.jar</destFileName>
                          </artifactItem>
                          <artifactItem>
                              <groupId>org.graalvm.truffle</groupId>
                              <artifactId>truffle-compiler</artifactId>
                              <version>${graalvm.polyglot.version}</version>
                              <type>jar</type>
                              <destFileName>truffle-compiler.jar</destFileName>
                          </artifactItem>
                          <artifactItem>
                              <groupId>org.graalvm.compiler</groupId>
                              <artifactId>compiler</artifactId>
                              <version>${graalvm.polyglot.version}</version>
                              <type>jar</type>
                              <destFileName>compiler.jar</destFileName>
                          </artifactItem>
                      </artifactItems>
                  </configuration>
              </execution>
          </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.5.3</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
                <goal>shade</goal>
            </goals>
            <configuration>
                <finalName>${uberjar.name}</finalName>
                <transformers>
                    <!-- ServicesResourceTransformer is required for Graal languages to work in uber jar -->
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                        <mainClass>org.openjdk.jmh.Main</mainClass>
                    </transformer>
                </transformers>
                <filters>
                    <filter>
                        <!--
                            Shading signed JARs will fail without this.
                            http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                        -->
                        <artifact>*:*</artifact>
                        <excludes>
                            <exclude>META-INF/*.SF</exclude>
                            <exclude>META-INF/*.DSA</exclude>
                            <exclude>META-INF/*.RSA</exclude>
                        </excludes>
                    </filter>
                </filters>
            </configuration>
         </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
    <profiles>
      <profile>
        <!--
          Profile used to enable Graal CE JIT on a different JDK than GraalVM.
          -->
        <id>truffle-jit</id>
        <build>
          <plugins>
              <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>3.1.2</version>
                  <configuration>
                      <argLine>
                          -XX:+UnlockExperimentalVMOptions
                          -XX:+EnableJVMCI
                          --upgrade-module-path=${project.build.directory}/compiler
                      </argLine>
                  </configuration>
              </plugin>
              <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>exec-maven-plugin</artifactId>
                  <version>1.6.0</version>
                  <executions>
                      <execution>
                          <id>default-cli</id>
                          <goals>
                              <goal>exec</goal>
                          </goals>
                          <configuration>
                              <executable>${java.home}/bin/java</executable>
                              <arguments>
                                  <argument>-Djmh.blackhole.autoDetect=false</argument>
                                  <argument>--module-path</argument>
                                  <modulepath/>
                                  <argument>-XX:+UnlockExperimentalVMOptions</argument>
                                  <argument>-XX:+EnableJVMCI</argument>
                                  <argument>--upgrade-module-path=${project.build.directory}/compiler/</argument>
                                  <argument>-classpath</argument>
                                  <classpath/>
                                  <argument>org.openjdk.jmh.Main</argument>
                                  <!-- optionally provide a regexp of tests to run
                                      e.g. -Djmh.tests="GraalWasmPhotonTest"
                                  -->
                                  <argument>${jmh.tests}</argument>
                              </arguments>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>
          </plugins>
        </build>
      </profile>
    </profiles>
</project>
